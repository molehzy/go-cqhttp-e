.版本 2
.支持库 spec

.程序集 程序集1
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
    
    _临时子程序 () ' 在初始化代码执行完毕后调用测试代码
    返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序
    ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
    

.子程序 WS收到消息
    .参数 Server, 整数型
    .参数 dwConnID, 整数型
    .参数 iOperationCode, 字节型
    .参数 pData, 整数型
    .参数 Len, 整数型
    .局部变量 文本, 文本型
    .局部变量 数据, 字节集
    .局部变量 客户, 整数型
    .局部变量 data, yyJSON解析

    .如果真 (iOperationCode ＝ 1)
        数据 ＝ 指针到字节集 (pData, Len)
        文本 ＝ UTF8到文本 (数据)
        客户 ＝ dwConnID
        
        .判断开始 (data.解析 (文本, #YYJSON_READ_ANSI))
            调用子程序 (WS消息, , , 客户, 文本)
            
            .判断开始 (data.取文本 (, “post_type”) ＝ “meta_event”)
                返回 ()
                
            .判断 (data.取文本 (, “post_type”) ＝ “message”)
                
                .判断开始 (data.取文本 (, “message_type”) ＝ “private”)
                    调用子程序 (私聊消息, , , 客户, data.取文本 (, “message”), 到文本 (data.取整数 (, “message_id”)), data.通配_取文本 (, “/sender/nickname”), 到文本 (data.通配_取长整数 (, “/sender/user_id”)), data.取文本 (, “sub_type”))
                    返回 ()
                    
                .判断 (data.取文本 (, “message_type”) ＝ “group”)
                    调用子程序 (群聊消息, , , 客户, 到文本 (data.取长整数 (, “group_id”)), data.取文本 (, “message”), 到文本 (data.取长整数 (, “message_id”)), data.通配_取文本 (, “/sender/card”), data.通配_取文本 (, “/sender/nickname”), data.通配_取文本 (, “/sender/role”), 到文本 (data.通配_取长整数 (, “/sender/user_id”)), data.取文本 (, “sub_type”))
                    返回 ()
                .默认
                    
                .判断结束
                
            .判断 (data.取文本 (, “post_type”) ＝ “notice”)
                
                .判断开始 (data.取文本 (, “notice_type”) ＝ “group_upload”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), data.通配_取文本 (, “/file/name”), 到文本 (data.通配_取长整数 (, “/file/size”)), data.通配_取文本 (, “/file/url”), 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), “”, “”, “”, “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “group_admin”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “sub_type”), “”, “”, “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “group_decrease”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “sub_type”), 到文本 (data.取长整数 (, “operator_id”)), “”, “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “group_increase”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “sub_type”), 到文本 (data.取长整数 (, “operator_id”)), “”, “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “group_ban”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “sub_type”), 到文本 (data.取长整数 (, “operator_id”)), 到文本 (data.取长整数 (, “duration”)), “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “friend_add”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, “”, 到文本 (data.取长整数 (, “user_id”)), “”, “”, “”, “”)
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “group_recall”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), “”, 到文本 (data.取长整数 (, “operator_id”)), “”, 到文本 (data.取长整数 (, “message_id”)))
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “friend_recall”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), “”, “”, “”, “”, 到文本 (data.取长整数 (, “user_id”)), “”, “”, “”, 到文本 (data.取长整数 (, “message_id”)))
                    返回 ()
                    
                .判断 (data.取文本 (, “notice_type”) ＝ “offline_file”)
                    调用子程序 (通知消息, , , 客户, data.取文本 (, “notice_type”), data.通配_取文本 (, “/file/name”), 到文本 (data.通配_取长整数 (, “/file/size”)), data.通配_取文本 (, “/file/url”), 到文本 (data.取长整数 (, “user_id”)), “”, “”, “”, “”)
                    返回 ()
                    
                .默认
                    
                .判断结束
                
            .判断 (data.取文本 (, “post_type”) ＝ “request”)
                
                .判断开始 (data.取文本 (, “request_type”) ＝ “friend”)
                    调用子程序 (请求消息, , , 客户, data.取文本 (, “request_type”), “”, “”, 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “comment”), data.取文本 (, “flag”))
                    返回 ()
                    
                .判断 (data.取文本 (, “request_type”) ＝ “group”)
                    调用子程序 (请求消息, , , 客户, data.取文本 (, “request_type”), data.取文本 (, “sub_type”), 到文本 (data.取长整数 (, “group_id”)), 到文本 (data.取长整数 (, “user_id”)), data.取文本 (, “comment”), data.取文本 (, “flag”))
                    返回 ()
                    
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .默认
            调用子程序 (WS消息, , , 客户, “Json格式出错 - ” ＋ 文本)
            调试输出 (文本)
        .判断结束
        
    .如果真结束
    

.子程序 WS客户进入
    .参数 Server, 整数型
    .参数 dwConnID, 整数型

    调用子程序 (WS消息, , , dwConnID, “客户端进入”)
    

.子程序 WS客户退出
    .参数 Server, 整数型
    .参数 dwConnID, 整数型
    .参数 enOperation, 整数型
    .参数 iErrorCode, 整数型

    调用子程序 (WS消息, , , dwConnID, “客户端退出, iErrorCode:” ＋ 到文本 (iErrorCode))
    

.子程序 _private, , 公开, 私聊消息,示例代码
    .参数 dwConnID, 整数型, , 客户句柄
    .参数 message, 文本型, , 消息内容
    .参数 message_id, 文本型, , 消息 ID
    .参数 nickname, 文本型, , 昵称
    .参数 user_id, 文本型, , 发送者 QQ 号
    .参数 sub_type, 文本型, , 消息子类型, 如果是好友则是 friend, 如果是群临时会话则是 group, 如果是在群中自身发送则是 group_self
    .参数 self_id, 文本型, , 收到事件的机器人 QQ 号

    

.子程序 _group, , 公开, 群消息,示例代码
    .参数 dwConnID, 整数型, , 客户句柄
    .参数 group_id, 文本型, , 群号
    .参数 message, 文本型, , 消息内容
    .参数 message_id, 文本型, , 消息 ID
    .参数 card, 文本型, , 群名片／备注
    .参数 nickname, 文本型, , 昵称
    .参数 role, 文本型, , 角色，owner 或 admin 或 member
    .参数 user_id, 文本型, , 发送者 QQ 号
    .参数 sub_type, 文本型, , 消息子类型, 正常消息是 normal, 匿名消息是 anonymous, 系统提示 ( 如「管理员已禁止群内匿名聊天」 ) 是 notice
    .参数 self_id, 文本型, , 收到事件的机器人 QQ 号

    

.子程序 _notice, , 公开, 通知事件,示例代码
    .参数 dwConnID, 整数型, , 客户句柄
    .参数 notice_type, 文本型, , 通知类型
    .参数 name, 文本型, , 文件名
    .参数 size, 文本型, , 文件大小（字节数）
    .参数 url, 文本型, , 文件链接
    .参数 group_id, 文本型, , 群号
    .参数 user_id, 文本型, , QQ 号
    .参数 sub_type, 文本型, , 事件子类型
    .参数 operator_id, 文本型, , 操作者 QQ 号
    .参数 duration, 文本型, , 禁言时长，单位秒
    .参数 message_id, 文本型, , 被撤回的消息 ID
    .参数 self_id, 文本型, , 收到事件的机器人 QQ 号

    

.子程序 _request, , 公开, 请求事件,示例代码
    .参数 dwConnID, 整数型, , 客户句柄
    .参数 request_type, 文本型, , 请求类型
    .参数 sub_type, 文本型, , 请求子类型
    .参数 group_id, 文本型, , 群号
    .参数 user_id, 文本型, , 发送请求的 QQ 号
    .参数 comment, 文本型, , 验证信息
    .参数 flag, 文本型, , 请求 flag，在调用处理请求的 API 时需要传入
    .参数 self_id, 文本型, , 收到事件的机器人 QQ 号

    

.子程序 _ws, , 公开, ws客户端消息,示例代码
    .参数 dwConnID, 整数型, , 客户句柄
    .参数 msg, 文本型

    

