.版本 2

.程序集 精益模块复制的
.子程序 线程_初始化COM库, , , 有时执行线程的时候，会自动关闭，此时，可以在多线程的程序里创建COM对象前先初始化，一个线程只能调用一次
    CoInitialize (0)

.子程序 线程_取消COM库, , , 取消COM库的初始化，如果你在线程头部加入了 线程_初始化COM库 请在尾部加入此命令
    CoUninitialize ()

.子程序 取指针文本_, 整数型
    .参数 参数_文本, 文本型

    置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
    ' mov eax,[ebp+8]
    ' mov eax,[eax]
    ' leave
    ' retn 04
    返回 (0)

.子程序 取指针_字节集型, 整数型, , 取到的是变量堆地址,和 取变量数据地址() 一样
    .参数 字节集, 字节集, 参考

    置入代码 ({ 139, 69, 8, 139, 0, 133, 192, 15, 132, 3, 0, 0, 0, 131, 192, 8, 201, 194, 4, 0 })
    返回 (0)
    

.子程序 取指针_文本型, 整数型, , 取到的是变量在堆中的地址,和 取变量数据地址() 一样
    .参数 文本, 文本型, 参考

    置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
    返回 (0)

.子程序 内部_协议头取名, 文本型
    .参数 协议头, 文本型
    .局部变量 位置, 整数型
    .局部变量 结果, 文本型

    位置 ＝ 寻找文本 (协议头, “:”, , 假)
    .如果真 (位置 ≠ -1)
        结果 ＝ 取文本左边 (协议头, 位置 － 1)
    .如果真结束
    返回 (删首尾空 (结果))

.子程序 内部_数组成员是否存在_文本, 整数型
    .参数 数组, 文本型, 数组
    .参数 要判断值, 文本型
    .局部变量 局_计次, 整数型

    .计次循环首 (取数组成员数 (数组), 局_计次)
        .如果真 (数组 [局_计次] ＝ 要判断值)
            返回 (局_计次)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)

.子程序 内部_Cookie取值, 文本型
    .参数 Cookie, 文本型
    .局部变量 位置, 整数型
    .局部变量 结果, 文本型

    位置 ＝ 寻找文本 (Cookie, “=”, , 假)
    .如果真 (位置 ≠ -1)
        结果 ＝ 取文本右边 (Cookie, 取文本长度 (Cookie) － 位置)
    .如果真结束
    返回 (结果)

.子程序 内部_Cookie取名, 文本型
    .参数 Cookie, 文本型
    .局部变量 位置, 整数型
    .局部变量 结果, 文本型

    位置 ＝ 寻找文本 (Cookie, “=”, , 假)
    .判断开始 (位置 ≠ -1)
        结果 ＝ 取文本左边 (Cookie, 位置 － 1)
    .默认
        结果 ＝ Cookie
    .判断结束
    返回 (删首尾空 (结果))

.子程序 内部_数组成员是否存在1, 逻辑型, , Cookie处理专用
    .参数 数组, 文本型, 数组
    .参数 要判断值, 文本型
    .局部变量 局_计次, 整数型

    .计次循环首 (取数组成员数 (数组), 局_计次)
        .如果真 (内部_Cookie取名 (数组 [局_计次]) ＝ 要判断值)
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    返回 (假)

.子程序 内部_协议头取值, 文本型
    .参数 协议头, 文本型
    .局部变量 位置, 整数型
    .局部变量 结果, 文本型

    位置 ＝ 寻找文本 (协议头, “:”, , 假)
    .如果真 (位置 ≠ -1)
        结果 ＝ 取文本右边 (协议头, 取文本长度 (协议头) － 位置)
    .如果真结束
    返回 (删首尾空 (结果))

.子程序 网页_访问_对象, 字节集, , 使用WinHttp的对象方式访问网页
    .参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
    .参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD 3=PUT  4=OPTIONS  5=DELETE  6=TRACE  7=CONNECT
    .参数 提交信息, 文本型, 可空, "POST"专用   自动UTF8编码
    .参数 提交Cookies, 文本型, 参考 可空, 设置提交时的cookie
    .参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
    .参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开
    .参数 返回协议头, 文本型, 参考 可空, 返回的协议头
    .参数 返回状态代码, 整数型, 参考 可空, 网页返回的状态代码，例如：200；302；404等
    .参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
    .参数 字节集提交, 字节集, 可空, 提交字节集数据
    .参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
    .参数 超时, 整数型, 可空, 秒|默认为15秒,-1为无限等待
    .参数 代理用户名, 文本型, 可空, 用户名
    .参数 代理密码, 文本型, 可空, 密码
    .参数 代理标识, 整数型, 可空, 代理标识，默认为1，0为路由器
    .参数 对象继承, 对象, 可空, 此处可自行提供对象，不再主动创建
    .参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新
    .参数 是否补全必要协议头, 逻辑型, 可空, 当附件协议头为空时自动添加必要的UA协议头 默认为真，假将不再添加非传入协议头
    .参数 是否处理协议头大小写, 逻辑型, 可空, 将协议头中的键名首字母处理为大写  默认为真
    .局部变量 局_访问方式, 文本型
    .局部变量 局_WinHttp, 对象
    .局部变量 局_发送协议头, 文本型, , "0"
    .局部变量 局_返回协议头, 文本型, , "0"
    .局部变量 局_计次, 整数型
    .局部变量 局_网页数据, 字节集
    .局部变量 局_变体提交, 变体型
    .局部变量 局_附加协议头, 文本型

    .如果真 (是否为空 (是否自动合并更新Cookie))
        是否自动合并更新Cookie ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否补全必要协议头))
        是否补全必要协议头 ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否处理协议头大小写))
        是否处理协议头大小写 ＝ 真
    .如果真结束
    
    线程_初始化COM库 ()
    
    .如果真 (访问方式 ＜ 0 或 访问方式 ＞ 7)
        访问方式 ＝ 0
    .如果真结束
    局_访问方式 ＝ 多项选择 (访问方式 ＋ 1, “GET”, “POST”, “HEAD”, “PUT”, “OPTIONS”, “DELETE”, “TRACE”, “CONNECT”)
    
    .判断开始 (是否为空 (对象继承))
        .如果真 (局_WinHttp.创建 (“WinHttp.WinHttpRequest.5.1”, ) ＝ 假)
            返回 ({ })
        .如果真结束
        
    .默认
        局_WinHttp ＝ 对象继承
    .判断结束
    
    .如果真 (超时 ≠ -1)
        .如果 (超时 ＜ 1)
            超时 ＝ 15000
        .否则
            超时 ＝ 超时 × 1000
        .如果结束
        局_WinHttp.方法 (“SetTimeouts”, 超时, 超时, 超时, 超时)
    .如果真结束
    
    .如果真 (代理地址 ≠ “”)
        局_WinHttp.方法 (“SetProxy”, 2, 代理地址)
    .如果真结束
    局_WinHttp.方法 (“Open”, 局_访问方式, 网址, 假)
    .如果真 (禁止重定向)
        局_WinHttp.写属性 (“Option”, 6, 0)
    .如果真结束
    
    局_WinHttp.写属性 (“Option”, 4, 13056) ' 忽略错误标志
    
    局_附加协议头 ＝ 附加协议头
    .如果真 (是否补全必要协议头)
        .如果真 (寻找文本 (局_附加协议头, “Accept:”, , 真) ＝ -1)
            局_附加协议头 ＝ 局_附加协议头 ＋ #换行符 ＋ “Accept: */*”
        .如果真结束
        
        .如果真 (寻找文本 (局_附加协议头, “Referer:”, , 真) ＝ -1)
            局_附加协议头 ＝ 局_附加协议头 ＋ #换行符 ＋ “Referer: ” ＋ 网址
        .如果真结束
        
        .如果真 (寻找文本 (局_附加协议头, “Accept-Language:”, , 真) ＝ -1)
            局_附加协议头 ＝ 局_附加协议头 ＋ #换行符 ＋ “Accept-Language: zh-cn”
        .如果真结束
        
        .如果真 (寻找文本 (局_附加协议头, “User-Agent:”, , 真) ＝ -1)
            局_附加协议头 ＝ 局_附加协议头 ＋ #换行符 ＋ “User-Agent: Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”
        .如果真结束
        
        .如果真 (访问方式 ＝ 1)
            .如果真 (寻找文本 (局_附加协议头, “Content-Type:”, , 真) ＝ -1)
                局_附加协议头 ＝ 局_附加协议头 ＋ #换行符 ＋ “Content-Type: application/x-www-form-urlencoded”
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
    .如果真 (是否处理协议头大小写)
        局_附加协议头 ＝ 网页_处理协议头 (局_附加协议头)
    .如果真结束
    
    .如果真 (代理地址 ≠ “” 且 代理用户名 ≠ “”)
        .如果真 (是否为空 (代理标识))
            代理标识 ＝ 1
        .如果真结束
        
        局_WinHttp.方法 (“SetCredentials”, 代理用户名, 代理密码, 代理标识)
        .如果真 (代理标识 ＝ 1)
            局_WinHttp.方法 (“SetRequestHeader”, “Proxy-Authorization”, “Basic ” ＋ 编码_BASE64编码 (到字节集 (代理用户名 ＋ “:” ＋ 代理密码)))
        .如果真结束
        
    .如果真结束
    
    .如果真 (取反 (是否为空 (提交Cookies)))
        .如果真 (取文本长度 (提交Cookies) ＞ 0)
            .如果真 (寻找文本 (提交Cookies, “Cookie:”, , 真) ≠ -1)
                提交Cookies ＝ 子文本替换 (提交Cookies, “Cookie:”, “”, , , 假)
            .如果真结束
            
        .如果真结束
        局_WinHttp.方法 (“SetRequestHeader”, “Cookie”, 提交Cookies)
    .如果真结束
    
    
    .判断开始 (寻找文本 (局_附加协议头, #换行符, , 假) ＝ -1)
        局_WinHttp.方法 (“SetRequestHeader”, 内部_协议头取名 (局_附加协议头), 内部_协议头取值 (局_附加协议头))
    .默认
        局_发送协议头 ＝ 分割文本 (局_附加协议头, #换行符, )
        .计次循环首 (取数组成员数 (局_发送协议头), 局_计次)
            .如果真 (局_发送协议头 [局_计次] ≠ “”)
                .如果真 (内部_协议头取名 (局_发送协议头 [局_计次]) ＝ “Connection”)
                    .如果真 (内部_协议头取值 (局_发送协议头 [局_计次]) ＝ “keep-alive”)
                        到循环尾 () ' 筛选排除此参数 避免协议头有此参数 HTTP对象又自动添加此参数
                    .如果真结束
                    
                .如果真结束
                
                局_WinHttp.方法 (“SetRequestHeader”, 内部_协议头取名 (局_发送协议头 [局_计次]), 内部_协议头取值 (局_发送协议头 [局_计次]))
            .如果真结束
            
        .计次循环尾 ()
    .判断结束
    
    .判断开始 (字节集提交 ＝ { })
        局_WinHttp.方法 (“Send”, 提交信息)
    .默认
        局_变体提交.赋值 (字节集提交, )
        局_WinHttp.方法 (“Send”, 局_变体提交)
    .判断结束
    局_网页数据 ＝ 局_WinHttp.读属性 (“ResponseBody”, ).取字节集 ()
    返回协议头 ＝ 局_WinHttp.读文本属性 (“GetAllResponseHeaders”, )
    返回状态代码 ＝ 局_WinHttp.读数值属性 (“Status”, )
    局_WinHttp.读文本属性 (“StatusText”, )
    局_返回协议头 ＝ 分割文本 (返回协议头, #换行符, )
    返回Cookies ＝ “”
    .计次循环首 (取数组成员数 (局_返回协议头), 局_计次)
        .如果真 (文本_取左边 (局_返回协议头 [局_计次], “: ”) ＝ “Set-Cookie”)
            .判断开始 (寻找文本 (局_返回协议头 [局_计次], “;”, , 假) ≠ -1)
                返回Cookies ＝ 返回Cookies ＋ 删首尾空 (文本_取出中间文本 (局_返回协议头 [局_计次], “Set-Cookie:”, “;”)) ＋ “; ”
            .默认
                返回Cookies ＝ 返回Cookies ＋ 删首尾空 (子文本替换 (局_返回协议头 [局_计次], “Set-Cookie:”, , , , 假)) ＋ “; ”
            .判断结束
            
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (取文本左边 (返回Cookies, 2) ＝ “; ”)
        返回Cookies ＝ 取文本左边 (返回Cookies, 取文本长度 (返回Cookies) － 2)
    .如果真结束
    
    
    .如果真 (是否自动合并更新Cookie)
        .如果真 (取反 (是否为空 (提交Cookies)))
            返回Cookies ＝ 网页_Cookie合并更新 (提交Cookies, 返回Cookies)
        .如果真结束
        
    .如果真结束
    局_WinHttp.清除 ()
    线程_取消COM库 ()
    返回 (局_网页数据)

.子程序 网页_Cookie合并更新, 文本型, , 返回更新后的Cookie
    .参数 旧Cookie, 文本型, 参考
    .参数 新Cookie, 文本型
    .局部变量 局_旧Cookie组, 文本型, , "0"
    .局部变量 局_新Cookie组, 文本型, , "0"
    .局部变量 局_计次, 整数型

    ' 初步格式化
    旧Cookie ＝ 删首尾空 (旧Cookie)
    .如果真 (取文本右边 (旧Cookie, 1) ＝ “;”)
        旧Cookie ＝ 旧Cookie ＋ 字符 (#空格键)
    .如果真结束
    
    新Cookie ＝ 删首尾空 (新Cookie)
    .如果真 (取文本右边 (新Cookie, 1) ＝ “;”)
        新Cookie ＝ 新Cookie ＋ 字符 (#空格键)
    .如果真结束
    
    ' 开始更新Cookie
    局_旧Cookie组 ＝ 分割文本 (旧Cookie, “; ”, )
    局_新Cookie组 ＝ 分割文本 (新Cookie, “; ”, )
    .计次循环首 (取数组成员数 (局_旧Cookie组), 局_计次)
        .如果真 (内部_数组成员是否存在1 (局_新Cookie组, 内部_Cookie取名 (局_旧Cookie组 [局_计次])) ＝ 假)
            加入成员 (局_新Cookie组, 局_旧Cookie组 [局_计次])
        .如果真结束
        
    .计次循环尾 ()
    ' 去除无效的Cookie
    旧Cookie ＝ “”
    .计次循环首 (取数组成员数 (局_新Cookie组), 局_计次)
        .如果真 (取文本右边 (局_新Cookie组 [局_计次], 8) ≠ “=deleted”)
            旧Cookie ＝ 旧Cookie ＋ 局_新Cookie组 [局_计次] ＋ “; ”
        .如果真结束
        
    .计次循环尾 ()
    旧Cookie ＝ 取文本左边 (旧Cookie, 取文本长度 (旧Cookie) － 2)
    ' 对重复的Cookie进行合并
    旧Cookie ＝ 文本_去重复文本 (旧Cookie, “; ”)
    返回 (旧Cookie)

.子程序 网页_处理协议头, 文本型, , 将协议头中的键名首字母处理为大写
    .参数 参_原始协议头, 文本型
    .局部变量 局_数组, 文本型, , "0"
    .局部变量 i, 整数型
    .局部变量 局_键名, 文本型
    .局部变量 局_键名右, 文本型
    .局部变量 局_键名左, 文本型
    .局部变量 局_协议头, 文本型
    .局部变量 局_键名拼接, 文本型
    .局部变量 局_键名数组, 文本型, , "0"
    .局部变量 局_总数, 整数型
    .局部变量 x, 整数型
    .局部变量 局_键值, 文本型
    .局部变量 局_冒号位置, 整数型

    局_数组 ＝ 分割文本 (参_原始协议头, #换行符, )
    .计次循环首 (取数组成员数 (局_数组), i)
        局_冒号位置 ＝ 寻找文本 (局_数组 [i], “:”, , 假)
        .如果真 (局_冒号位置 ＝ -1)
            到循环尾 ()
        .如果真结束
        
        局_键名 ＝ 取文本中间 (局_数组 [i], 1, 局_冒号位置 － 1)
        .如果 (寻找文本 (局_键名, “-”, , 假) ≠ -1)
            局_键名拼接 ＝ “”
            局_键名数组 ＝ 分割文本 (局_键名, “-”, )
            局_总数 ＝ 取数组成员数 (局_键名数组)
            .计次循环首 (局_总数, x)
                .如果 (x ＝ 局_总数)
                    局_键名拼接 ＝ 局_键名拼接 ＋ 文本_首字母改大写 (局_键名数组 [x])
                .否则
                    局_键名拼接 ＝ 局_键名拼接 ＋ 文本_首字母改大写 (局_键名数组 [x]) ＋ “-”
                .如果结束
                
            .计次循环尾 ()
            
            局_键名 ＝ 局_键名拼接
        .否则
            局_键名 ＝ 文本_首字母改大写 (局_键名)
        .如果结束
        
        局_键值 ＝ 取文本右边 (局_数组 [i], 取文本长度 (局_数组 [i]) － 取文本长度 (局_键名))
        .如果真 (取代码 (取文本左边 (局_键值, 1), ) ＝ 32)
            局_键值 ＝ 取文本右边 (局_键值, 取文本长度 (局_键值) － 1)
        .如果真结束
        
        局_协议头 ＝ 局_协议头 ＋ 局_键名 ＋ 局_键值 ＋ #换行符
        
        
    .计次循环尾 ()
    局_协议头 ＝ 取文本左边 (局_协议头, 取文本长度 (局_协议头) － 取文本长度 (#换行符))
    返回 (局_协议头)

.子程序 文本_取左边, 文本型, , 从文本的左边按 欲寻找的文本 开始寻找
    .参数 被查找的文本, 文本型, , 被查找的文本
    .参数 欲寻找的文本, 文本型, , 欲寻找的文本
    .参数 起始寻找位置, 整数型, 可空, 可为空，默认为1，从左往右寻找，如果为负数，则从右往左寻找。
    .参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。
    .局部变量 局_长度, 整数型
    .局部变量 局_起始搜寻位置, 整数型
    .局部变量 局_方向, 整数型
    .局部变量 局_找到的位置, 整数型
    .局部变量 局_返回结果, 文本型

    局_长度 ＝ 取文本长度 (被查找的文本)
    
    局_起始搜寻位置 ＝ 起始寻找位置
    .如果真 (局_起始搜寻位置 ＜ 0)
        局_起始搜寻位置 ＝ 局_起始搜寻位置 × -1
        .如果真 (局_起始搜寻位置 ＝ 1)
            局_起始搜寻位置 ＝ 0
        .如果真结束
        局_方向 ＝ 1
    .如果真结束
    
    .如果 (局_方向 ＝ 1)
        局_找到的位置 ＝ 倒找文本 (被查找的文本, 欲寻找的文本, 局_长度 － 局_起始搜寻位置 ＋ 1, 是否不区分大小写)
    .否则
        .如果真 (局_起始搜寻位置 ＝ 0)
            局_起始搜寻位置 ＝ 1
        .如果真结束
        局_找到的位置 ＝ 寻找文本 (被查找的文本, 欲寻找的文本, 局_起始搜寻位置, 是否不区分大小写)
    .如果结束
    
    .如果真 (局_找到的位置 ＝ -1)
        返回 (“”)
    .如果真结束
    
    局_返回结果 ＝ 取文本左边 (被查找的文本, 局_找到的位置 － 1)
    返回 (局_返回结果)

.子程序 文本_逐字分割, 整数型, , 将指定文本,逐字分割成数组,保存为指定的变量数组中,返回成员个数,可识别换行符及全半角字符和汉字
    .参数 文本, 文本型, , 需要分割的文本
    .参数 返回的数组, 文本型, 参考 可空 数组, 保存分割结果的数组变量
    .局部变量 c, 整数型
    .局部变量 n, 整数型
    .局部变量 z, 整数型
    .局部变量 返回文本, 文本型
    .局部变量 临时字节集, 字节集

    清除数组 (返回的数组)
    临时字节集 ＝ 到字节集 (文本)
    c ＝ 取字节集长度 (临时字节集)
    n ＝ 1
    .判断循环首 (n ≤ c)
        .如果 (n ＋ 1 ＞ c)
            z ＝ 1
        .否则
            .如果 (临时字节集 [n] ＞ 128)
                z ＝ 2
            .否则
                .如果 (临时字节集 [n] ≠ 13)
                    z ＝ 1
                .否则
                    .如果 (临时字节集 [n ＋ 1] ＝ 10)
                        z ＝ 2
                    .否则
                        z ＝ 1
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
        .如果结束
        加入成员 (返回的数组, 到文本 (取字节集中间 (临时字节集, n, z)))
        n ＝ n ＋ z
    .判断循环尾 ()
    返回 (取数组成员数 (返回的数组))

.子程序 文本_去重复文本, 文本型, , 去除原文本中重复的文本
    .参数 原文本, 文本型
    .参数 分割符, 文本型, 可空, 原文本单个内容间的分隔符，例如：---  留空为：逐字分割
    .局部变量 局_数组, 文本型, , "0"
    .局部变量 局_数组1, 文本型, , "0"
    .局部变量 局_计次, 整数型
    .局部变量 局_文本, 文本型

    .如果 (是否为空 (分割符))
        文本_逐字分割 (原文本, 局_数组)
    .否则
        局_数组 ＝ 分割文本 (原文本, 分割符, )
    .如果结束
    
    
    .计次循环首 (取数组成员数 (局_数组), 局_计次)
        .如果真 (内部_数组成员是否存在_文本 (局_数组1, 局_数组 [局_计次]) ＝ -1)
            加入成员 (局_数组1, 局_数组 [局_计次])
            局_文本 ＝ 局_文本 ＋ 局_数组 [局_计次] ＋ 分割符
        .如果真结束
        
    .计次循环尾 ()
    局_文本 ＝ 取文本左边 (局_文本, 取文本长度 (局_文本) － 取文本长度 (分割符))
    返回 (局_文本)

.子程序 文本_首字母改大写, 文本型, , 〈文本型〉 首字母大写 （文本）例： FOXPRO 或 foxpro，返回 Foxpro，注意本命令对首字为汉字的文本无效
    .参数 英文文本, 文本型

    返回 (到大写 (取文本左边 (英文文本, 1)) ＋ 取文本中间 (英文文本, 2, 取文本长度 (英文文本)))

.子程序 文本_取出中间文本, 文本型, , 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
    .参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
    .参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color="#引号red#引号">"
    .参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color="#引号red#引号">"
    .参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
    .参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。
    .局部变量 局_前面文本位置, 整数型
    .局部变量 局_后面文本位置, 整数型
    .局部变量 局_前面文本, 文本型
    .局部变量 局_后面文本, 文本型

    局_前面文本 ＝ 子文本替换 (前面文本, “#引号”, #引号, , , 真)
    局_后面文本 ＝ 子文本替换 (后面文本, “#引号”, #引号, , , 真)
    局_前面文本位置 ＝ 寻找文本 (欲取全文本, 局_前面文本, 起始搜寻位置, 是否不区分大小写)
    .如果真 (局_前面文本位置 ≠ -1)
        局_前面文本位置 ＝ 局_前面文本位置 ＋ 取文本长度 (局_前面文本)
        局_后面文本位置 ＝ 寻找文本 (欲取全文本, 局_后面文本, 局_前面文本位置, 是否不区分大小写)
        .如果真 (局_后面文本位置 ≠ -1)
            返回 (取文本中间 (欲取全文本, 局_前面文本位置, 局_后面文本位置 － 局_前面文本位置))
        .如果真结束
        
    .如果真结束
    返回 (“”)

.子程序 文本_替换, 文本型, , 批量替换文本；
    .参数 原文本, 文本型
    .参数 替换进行的次数, 整数型, 可空, 可空；参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
    .参数 替换的起始位置, 整数型, 可空, 可空；参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始
    .参数 是否区分大小写, 逻辑型, 可空, 可空； 初始值为“假”不区分大小写；为真区分大小写。
    .参数 欲被替换的子文本1, 文本型
    .参数 用作替换的子文本1, 文本型
    .参数 欲被替换的子文本2, 文本型, 可空
    .参数 用作替换的子文本2, 文本型, 可空
    .参数 欲被替换的子文本3, 文本型, 可空
    .参数 用作替换的子文本3, 文本型, 可空
    .参数 欲被替换的子文本4, 文本型, 可空
    .参数 用作替换的子文本4, 文本型, 可空
    .参数 欲被替换的子文本5, 文本型, 可空
    .参数 用作替换的子文本5, 文本型, 可空
    .局部变量 局_文本, 文本型

    .如果真 (替换的起始位置 ＝ 0)
        替换的起始位置 ＝ 1
    .如果真结束
    .如果 (是否为空 (替换进行的次数))
        局_文本 ＝ 子文本替换 (原文本, 欲被替换的子文本1, 用作替换的子文本1, 替换的起始位置, , 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本2, 用作替换的子文本2, 替换的起始位置, , 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本3, 用作替换的子文本3, 替换的起始位置, , 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本4, 用作替换的子文本4, 替换的起始位置, , 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本5, 用作替换的子文本5, 替换的起始位置, , 是否区分大小写)
    .否则
        局_文本 ＝ 子文本替换 (原文本, 欲被替换的子文本1, 用作替换的子文本1, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本2, 用作替换的子文本2, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本3, 用作替换的子文本3, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本4, 用作替换的子文本4, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        局_文本 ＝ 子文本替换 (局_文本, 欲被替换的子文本5, 用作替换的子文本5, 替换的起始位置, 替换进行的次数, 是否区分大小写)
    .如果结束
    返回 (局_文本)

.子程序 编码_Ansi到Unicode_文本型, 文本型, , 将Ansi码转换为Unicode码，如：将“精易论坛”转换后将返回格式如：“&#31934&#26131&#-29766&#22363”
    .参数 Ansi, 文本型, , 欲转换的文本，如：“精易论坛”。
    .局部变量 局_文本, 文本型
    .局部变量 数据2, 字节集
    .局部变量 长度, 整数型
    .局部变量 i, 整数型

    .如果真 (删首尾空 (Ansi) ＝ “”)
        返回 (“”)
    .如果真结束
    长度 ＝ MultiByteToWideChar (936, 0, 取指针文本_ (Ansi), -1, 0, 0)
    数据2 ＝ 取空白字节集 (长度 × 2)
    MultiByteToWideChar (936, 0, 取指针文本_ (Ansi), -1, 取指针_字节集型 (数据2), 长度 × 2)
    数据2 ＝ 取字节集左边 (数据2, 取字节集长度 (数据2) － 2)
    .变量循环首 (1, 取字节集长度 (数据2), 2, i)
        局_文本 ＝ 局_文本 ＋ “&#” ＋ 到文本 (取字节集数据 (取字节集中间 (数据2, i, 2), #整数型, ))
    .变量循环尾 ()
    返回 (局_文本)

.子程序 编码_Utf8到Ansi, 文本型
    .参数 utf8字节集, 字节集
    .局部变量 局_长度, 整数型
    .局部变量 Length, 整数型
    .局部变量 Unicode, 字节集
    .局部变量 unicode_len, 整数型
    .局部变量 ansi_len, 整数型
    .局部变量 ansi, 文本型
    .局部变量 局_指针, 整数型

    .如果真 (utf8字节集 ＝ { })
        返回 (“”)
    .如果真结束
    局_长度 ＝ 取字节集长度 (utf8字节集)
    局_指针 ＝ 取指针_字节集型 (utf8字节集)
    Length ＝ MultiByteToWideChar (65001, 0, 局_指针, 局_长度, 0, 0) × 2
    Unicode ＝ 取空白字节集 (Length ＋ 2)
    MultiByteToWideChar (65001, 0, 局_指针, 局_长度, 取指针_字节集型 (Unicode), Length)
    局_指针 ＝ 取指针_字节集型 (Unicode)
    unicode_len ＝ 取字节集长度 (Unicode) ÷ 2
    ansi_len ＝ WideCharToMultiByte (936, 0, 局_指针, unicode_len, lstrlenW (局_指针), 0, 0, 0)
    ansi ＝ 取空白文本 (ansi_len)
    WideCharToMultiByte (936, 0, 局_指针, unicode_len, 取指针_文本型 (ansi), ansi_len, 0, 0)
    返回 (ansi)
    

.子程序 编码_BASE64编码, 文本型, , BASE64编码处理；成功返回编码后的文本；
    .参数 待编码数据, 字节集, , 待编码字节集
    .局部变量 余数
    .局部变量 临时, 字节型, , "3"
    .局部变量 变量
    .局部变量 集合, 字节集
    .局部变量 长度, 整数型
    .局部变量 字符, 字节集
    .局部变量 i

    长度 ＝ 取字节集长度 (待编码数据)
    .如果真 (长度 ＜ 1)
        返回 (“”)
    .如果真结束
    余数 ＝ 长度 ％ 3
    .如果真 (余数 ＞ 0)
        待编码数据 ＝ 待编码数据 ＋ 取空白字节集 (3 － 余数)
    .如果真结束
    长度 ＝ 取字节集长度 (待编码数据)
    字符 ＝ 取空白字节集 (长度 × 4 ÷ 3)
    i ＝ 1
    集合 ＝ 到字节集 (“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”)
    .变量循环首 (1, 长度, 3, 变量)
        临时 [1] ＝ 待编码数据 [变量]
        临时 [2] ＝ 待编码数据 [变量 ＋ 1]
        临时 [3] ＝ 待编码数据 [变量 ＋ 2]
        字符 [i] ＝ 集合 [右移 (临时 [1], 2) ＋ 1]
        字符 [i ＋ 1] ＝ 集合 [左移 (位与 (临时 [1], 3), 4) ＋ 右移 (临时 [2], 4) ＋ 1]
        字符 [i ＋ 2] ＝ 集合 [左移 (位与 (临时 [2], 15), 2) ＋ 右移 (临时 [3], 6) ＋ 1]
        字符 [i ＋ 3] ＝ 集合 [位与 (临时 [3], 63) ＋ 1]
        i ＝ i ＋ 4
    .变量循环尾 ()
    .如果真 (余数 ＞ 0)
        长度 ＝ 取字节集长度 (字符)
        .如果 (余数 ＝ 1)
            字符 [长度 － 1] ＝ 到字节 (取代码 (“=”, ))
            字符 [长度] ＝ 到字节 (取代码 (“=”, ))
        .否则
            字符 [长度] ＝ 到字节 (取代码 (“=”, ))
        .如果结束
        
    .如果真结束
    返回 (到文本 (字符))

