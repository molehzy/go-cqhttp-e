.版本 2

.程序集 类_CQHTTP, , 公开
.程序集变量 m_pServer, 整数型
.程序集变量 协议头, 文本型

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用
    

.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用
    停止 ()
    WSS销毁Server (m_pServer)
    WSS销毁Listener ()
    

.子程序 初始化, 逻辑型, 公开, 必须在代码开头执行且仅执行一次
    .参数 私聊消息回传, 子程序指针, , 见程序"_private"
    .参数 群聊消息回传, 子程序指针, , 见程序"_group"
    .参数 通知消息回传, 子程序指针, , 见程序"_notice"
    .参数 请求消息回传, 子程序指针, , 见程序"_request"
    .参数 WS消息回传, 子程序指针, , 见程序"_ws"

    .如果真 (m_pServer ＝ 0)
        m_pServer ＝ WSS创建 ()
        
        .如果真 (m_pServer ≠ 0)
            私聊消息 ＝ 私聊消息回传
            群聊消息 ＝ 群聊消息回传
            通知消息 ＝ 通知消息回传
            请求消息 ＝ 请求消息回传
            WS消息 ＝ WS消息回传
            WSS绑定事件 (&WS收到消息, &WS客户进入, &WS客户退出)
            返回 (真)
            
        .如果真结束
        返回 (假)
    .如果真结束
    返回 (假)
    

.子程序 启动, 逻辑型, 公开, 启动成功返回真
    .参数 监听, 文本型, , 示例：0.0.0.0
    .参数 端口, 整数型

    返回 (WSS启动 (m_pServer, 监听, 端口))
    

.子程序 停止, 逻辑型, 公开
    返回 (WSS停止 (m_pServer))
    

.子程序 _关闭客户, 逻辑型, 公开
    .参数 dwConnID, 整数型

    返回 (WSS断开 (m_pServer, dwConnID, 真))
    

.子程序 _是否在线, 逻辑型, 公开
    .参数 dwConnID, 整数型

    返回 (WSS是否在线 (m_pServer, dwConnID))
    

.子程序 _取客户地址, 文本型, 公开
    .参数 dwConnID, 整数型
    .局部变量 addr, 文本型
    .局部变量 port, 整数型

    WSS取客户端地址 (m_pServer, dwConnID, addr, port)
    返回 (addr ＋ “:” ＋ 到文本 (port))
    

.子程序 _是否运行中, 逻辑型, 公开
    返回 (WSS是否启动 (m_pServer))
    

.子程序 发送私聊消息, , 公开
    .参数 dwConnID, 整数型
    .参数 user_id, 文本型, , 对方 QQ 号
    .参数 message, 文本型, , 要发送的内容
    .参数 auto_escape, 逻辑型, , 消息内容是否作为纯文本发送（即不解析 CQ 码），只在 message 字段是字符串时有效
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “user_id”, 到长整数 (user_id))
    tmp.置文本 (, “message”, message)
    tmp.置逻辑 (, “auto_escape”, auto_escape)
    data.创建_空对象 ()
    data.置文本 (, “action”, “send_private_msg”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 发送群消息, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 message, 文本型, , 要发送的内容
    .参数 auto_escape, 逻辑型, , 消息内容是否作为纯文本发送（即不解析 CQ 码），只在 message 字段是字符串时有效
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置文本 (, “message”, message)
    tmp.置逻辑 (, “auto_escape”, auto_escape)
    data.创建_空对象 ()
    data.置文本 (, “action”, “send_group_msg”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 发送合并转发_群, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型
    .参数 messages, 数_node, 数组
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造
    .局部变量 tmp2, yyJSON构造
    .局部变量 list, yyJSON构造
    .局部变量 i, 整数型

    tmp.创建_空对象 ()
    tmp2.创建_空对象 ()
    list.创建_空数组 ()
    .计次循环首 (取数组成员数 (messages), i)
        .判断开始 (messages [i].id ＝ “”)
            tmp.置文本 (, “name”, messages [i].name)
            tmp.置文本 (, “uin”, messages [i].uin)
            tmp.置文本 (, “content”, messages [i].content)
            tmp.置文本 (, “seq”, messages [i].seq)
            tmp2.置文本 (, “type”, “node”)
            tmp2.置JSON (, “data”, tmp.到JSON (#YYJSON_WRITE_ANSI))
            
        .默认
            tmp.置文本 (, “id”, messages [i].id)
            tmp2.置文本 (, “type”, “node”)
            tmp2.置JSON (, “data”, tmp.到JSON (#YYJSON_WRITE_ANSI))
            
        .判断结束
        list.数组_置JSON (, #YJ_数组_加入, tmp2.到JSON (#YYJSON_WRITE_ANSI))
        tmp.清空 ()
        tmp2.清空 ()
    .计次循环尾 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置JSON (, “messages”, list.到JSON (#YYJSON_WRITE_ANSI))
    data.创建_空对象 ()
    data.置文本 (, “action”, “send_group_forward_msg”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 撤回消息, , 公开
    .参数 dwConnID, 整数型
    .参数 message_id, 文本型, , 消息 ID
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “message_id”, 到长整数 (message_id))
    data.创建_空对象 ()
    data.置文本 (, “action”, “delete_msg”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 处理加好友请求, , 公开
    .参数 dwConnID, 整数型
    .参数 flag, 文本型, , 加好友请求的 flag（需从上报的数据中获得）
    .参数 approve, 逻辑型, , 是否同意请求
    .参数 remark, 文本型, , 添加后的好友备注（仅在同意时有效）
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置文本 (, “flag”, flag)
    tmp.置逻辑 (, “approve”, approve)
    tmp.置文本 (, “remark”, remark)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_friend_add_request”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 处理加群请求, , 公开
    .参数 dwConnID, 整数型
    .参数 flag, 文本型, , 加群请求的 flag（需从上报的数据中获得）
    .参数 sub_type, 文本型, , add 或 invite，请求类型（需要和上报消息中的 sub_type 字段相符）
    .参数 approve, 逻辑型, , 是否同意请求／邀请
    .参数 reason, 文本型, , 拒绝理由（仅在拒绝时有效）
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置文本 (, “flag”, flag)
    tmp.置文本 (, “sub_type”, sub_type)
    tmp.置逻辑 (, “approve”, approve)
    tmp.置文本 (, “reason”, reason)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_add_request”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 设置群名片, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 user_id, 文本型, , 要设置的 QQ 号
    .参数 card, 文本型, , 群名片内容，空字符串表示删除群名片
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置长整数 (, “user_id”, 到长整数 (user_id))
    tmp.置文本 (, “card”, card)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_card”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 群组踢人, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 user_id, 文本型, , 要踢的 QQ 号
    .参数 reject_add_request, 逻辑型, , 拒绝此人的加群请求
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置长整数 (, “user_id”, 到长整数 (user_id))
    tmp.置逻辑 (, “reject_add_request”, reject_add_request)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_kick”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 群组单人禁言, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 user_id, 文本型, , 要禁言的 QQ 号
    .参数 duration, 整数型, , 禁言时长，单位秒，0 表示取消禁言
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置长整数 (, “user_id”, 到长整数 (user_id))
    tmp.置整数 (, “duration”, duration)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_ban”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 群组全员禁言, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 enable, 逻辑型, , 是否禁言
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置逻辑 (, “enable”, enable)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_whole_ban”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 退出群组, , 公开
    .参数 dwConnID, 整数型
    .参数 group_id, 文本型, , 群号
    .参数 is_dismiss, 逻辑型, , 是否解散，如果登录号是群主，则仅在此项为 真 时能够解散
    .局部变量 data, yyJSON构造
    .局部变量 tmp, yyJSON构造

    tmp.创建_空对象 ()
    tmp.置长整数 (, “group_id”, 到长整数 (group_id))
    tmp.置逻辑 (, “is_dismiss”, is_dismiss)
    data.创建_空对象 ()
    data.置文本 (, “action”, “set_group_leave”)
    data.置JSON (, “params”, tmp.到JSON (#YYJSON_WRITE_ANSI))
    WSS发送消息 (m_pServer, dwConnID, 1, 文本到UTF8 (data.到JSON (#YYJSON_WRITE_ANSI)))
    

.子程序 HTTP获取好友列表, 文本型, 公开
    .参数 HTTP地址, 文本型, , 示例：127.0.0.1:5700
    .参数 好友列表, 数_好友, 参考 数组, 请提供一个变量用于存放数据
    .局部变量 tmp, 文本型
    .局部变量 data, yyJSON解析
    .局部变量 计次, 整数型
    .局部变量 临时列表, 数_好友
    .局部变量 临时列表2, 数_好友, , "0"

    tmp ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://” ＋ HTTP地址 ＋ “/get_friend_list”, 0, , , , 协议头))
    data.解析 (tmp, #YYJSON_READ_ANSI)
    .判断开始 (data.取文本 (, “status”) ＝ “ok”)
        .计次循环首 (data.取成员数 (, “data”), 计次)
            临时列表.user_id ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/user_id”)
            临时列表.nickname ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/nickname”)
            临时列表.remark ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/remark”)
            加入成员 (临时列表2, 临时列表)
        .计次循环尾 ()
        好友列表 ＝ 临时列表2
        返回 (“ok”)
    .默认
        返回 (data.取文本 (, “status”))
    .判断结束
    

.子程序 HTTP获取群列表, 文本型, 公开
    .参数 HTTP地址, 文本型, , 示例：127.0.0.1:5700
    .参数 群列表, 数_群, 参考 数组, 请提供一个变量用于存放数据
    .局部变量 tmp, 文本型
    .局部变量 data, yyJSON解析
    .局部变量 计次, 整数型
    .局部变量 临时列表, 数_群
    .局部变量 临时列表2, 数_群, , "0"

    tmp ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://” ＋ HTTP地址 ＋ “/get_group_list”, 0, , , , 协议头))
    data.解析 (tmp, #YYJSON_READ_ANSI)
    .判断开始 (data.取文本 (, “status”) ＝ “ok”)
        .计次循环首 (data.取成员数 (, “data”), 计次)
            临时列表.group_id ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/group_id”)
            临时列表.group_name ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/group_name”)
            临时列表.member_count ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/member_count”)
            临时列表.max_member_count ＝ data.通配_取文本 (, “/data/” ＋ 到文本 (计次) ＋ “/max_member_count”)
            加入成员 (临时列表2, 临时列表)
        .计次循环尾 ()
        群列表 ＝ 临时列表2
        返回 (“ok”)
    .默认
        返回 (data.取文本 (, “status”))
    .判断结束
    

.子程序 HTTP发送私聊消息, 文本型, 公开, 成功返回消息ID
    .参数 HTTP地址, 文本型, , 示例：127.0.0.1:5700
    .参数 user_id, 文本型, , 对方 QQ 号
    .参数 message, 文本型, , 要发送的内容
    .参数 auto_escape, 逻辑型, , 消息内容是否作为纯文本发送（即不解析 CQ 码），只在 message 字段是字符串时有效
    .局部变量 data, yyJSON构造
    .局部变量 res, 文本型
    .局部变量 tmp, yyJSON解析

    data.创建_空对象 ()
    data.置长整数 (, “user_id”, 到长整数 (user_id))
    data.置文本 (, “message”, message)
    data.置逻辑 (, “auto_escape”, auto_escape)
    res ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://” ＋ HTTP地址 ＋ “/send_private_msg”, 1, data.到JSON (#YYJSON_WRITE_ANSI), , , 协议头))
    tmp.解析 (res, #YYJSON_READ_ANSI)
    .判断开始 (data.取文本 (, “status”) ＝ “ok”)
        返回 (data.通配_取文本 (, “/data/message_id”))
    .默认
        返回 (“failed”)
    .判断结束
    

.子程序 HTTP发送群消息, 文本型, 公开, 成功返回消息ID
    .参数 HTTP地址, 文本型, , 示例：127.0.0.1:5700
    .参数 group_id, 文本型, , 群号
    .参数 message, 文本型, , 要发送的内容
    .参数 auto_escape, 逻辑型, , 消息内容是否作为纯文本发送（即不解析 CQ 码），只在 message 字段是字符串时有效
    .局部变量 data, yyJSON构造
    .局部变量 res, 文本型
    .局部变量 tmp, yyJSON解析

    data.创建_空对象 ()
    data.置长整数 (, “group_id”, 到长整数 (group_id))
    data.置文本 (, “message”, message)
    data.置逻辑 (, “auto_escape”, auto_escape)
    res ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://” ＋ HTTP地址 ＋ “/send_group_msg”, 1, data.到JSON (#YYJSON_WRITE_ANSI), , , 协议头))
    tmp.解析 (res, #YYJSON_READ_ANSI)
    .判断开始 (data.取文本 (, “status”) ＝ “ok”)
        返回 (data.通配_取文本 (, “/data/message_id”))
    .默认
        返回 (“failed”)
    .判断结束
    

.子程序 At, 文本型, 公开, 返回生成好的CQ码
    .参数 qq, 文本型

    返回 (“[CQ:at,qq=” ＋ qq ＋ “]”)
    

.子程序 Image, 文本型, 公开, 返回生成好的CQ码
    .参数 file, 文本型, , 绝对路径、网络URL、Base64编码
    .参数 type, 文本型, 可空, 图片类型，flash 表示闪照，show 表示秀图，默认普通图片
    .参数 cache, 文本型, 可空, 0或1 只在通过网络 URL 发送时有效，表示是否使用已缓存的文件，默认 1
    .参数 id, 文本型, 可空, 发送秀图时的特效id，默认为40000
    .参数 c, 文本型, 可空, 通过网络下载图片时的线程数, 默认单线程. (在资源不支持并发时会自动处理)
    .参数 subType, 文本型, 可空, 图片子类型, 只出现在群聊
    .局部变量 cqc, 文本型

    cqc ＝ “[CQ:image,file=” ＋ file
    .如果真 (取反 (是否为空 (type)))
        cqc ＝ cqc ＋ “,type=” ＋ type
    .如果真结束
    .如果真 (取反 (是否为空 (cache)))
        cqc ＝ cqc ＋ “,cache=” ＋ cache
    .如果真结束
    .如果真 (取反 (是否为空 (id)))
        cqc ＝ cqc ＋ “,id=” ＋ id
    .如果真结束
    .如果真 (取反 (是否为空 (c)))
        cqc ＝ cqc ＋ “,c=” ＋ c
    .如果真结束
    .如果真 (取反 (是否为空 (subType)))
        cqc ＝ cqc ＋ “,subType=” ＋ subType
    .如果真结束
    cqc ＝ cqc ＋ “]”
    返回 (cqc)
    

.子程序 Cardimage, 文本型, 公开, 返回生成好的CQ码
    .参数 file, 文本型, , 和image的file字段对齐，支持也是一样的
    .参数 minwidth, 文本型, 可空, 默认不填为400，最小width
    .参数 minheight, 文本型, 可空, 默认不填为400，最小height
    .参数 maxwidth, 文本型, 可空, 默认不填为500，最大width
    .参数 maxheight, 文本型, 可空, 默认不填为1000，最大height
    .参数 source, 文本型, 可空, 分享来源的名称，可以留空
    .参数 icon, 文本型, 可空, 分享来源的icon图标url，可以留空
    .参数 cache, 文本型, 可空, 0或1 只在通过网络 URL 发送时有效，表示是否使用已缓存的文件，默认 1
    .局部变量 cqc, 文本型

    cqc ＝ “[CQ:cardimage,file=” ＋ file
    .如果真 (取反 (是否为空 (minwidth)))
        cqc ＝ cqc ＋ “,minwidth=” ＋ minwidth
    .如果真结束
    .如果真 (取反 (是否为空 (minheight)))
        cqc ＝ cqc ＋ “,minheight=” ＋ minheight
    .如果真结束
    .如果真 (取反 (是否为空 (maxwidth)))
        cqc ＝ cqc ＋ “,maxwidth=” ＋ maxwidth
    .如果真结束
    .如果真 (取反 (是否为空 (maxheight)))
        cqc ＝ cqc ＋ “,maxheight=” ＋ maxheight
    .如果真结束
    .如果真 (取反 (是否为空 (source)))
        cqc ＝ cqc ＋ “,source=” ＋ source
    .如果真结束
    .如果真 (取反 (是否为空 (icon)))
        cqc ＝ cqc ＋ “,icon=” ＋ icon
    .如果真结束
    .如果真 (取反 (是否为空 (cache)))
        cqc ＝ cqc ＋ “,cache=” ＋ cache
    .如果真结束
    cqc ＝ cqc ＋ “]”
    返回 (cqc)
    

.子程序 Reply, 文本型, 公开, 返回生成好的CQ码
    .参数 id, 文本型, , 回复时所引用的消息id, 必须为本群消息
    .参数 text, 文本型, 可空, 自定义回复的信息
    .参数 qq, 文本型, 可空, 自定义回复时的自定义QQ, 如果使用自定义信息必须指定
    .参数 time, 文本型, 可空, 可选. 自定义回复时的时间, 格式为Unix时间
    .参数 seq, 文本型, 可空, 起始消息序号, 可通过 get_msg 获得
    .局部变量 cqc, 文本型

    cqc ＝ “[CQ:reply,id=” ＋ id
    .如果真 (取反 (是否为空 (text)))
        cqc ＝ cqc ＋ “,text=” ＋ text
    .如果真结束
    .如果真 (取反 (是否为空 (qq)))
        cqc ＝ cqc ＋ “,qq=” ＋ qq
    .如果真结束
    .如果真 (取反 (是否为空 (time)))
        cqc ＝ cqc ＋ “,time=” ＋ time
    .如果真结束
    .如果真 (取反 (是否为空 (seq)))
        cqc ＝ cqc ＋ “,seq=” ＋ seq
    .如果真结束
    cqc ＝ cqc ＋ “]”
    返回 (cqc)
    

.子程序 Record, 文本型, 公开, 返回生成好的CQ码
    .参数 file, 文本型, , 收到的语音文件名、绝对路径、网络URL、Base64编码

    返回 (“[CQ:record,file=” ＋ file ＋ “]”)
    

.子程序 Face, 文本型, 公开, 返回生成好的CQ码
    .参数 id, 文本型

    返回 (“[CQ:face,id=” ＋ id ＋ “]”)
    

.子程序 Poke, 文本型, 公开, 返回生成好的CQ码
    .参数 qq, 文本型, , 需要戳的成员

    返回 (“[CQ:poke,qq=” ＋ qq ＋ “]”)
    

.子程序 TTS, 文本型, 公开, 返回生成好的CQ码
    .参数 text, 文本型, , 内容

    返回 (“[CQ:tts,text=” ＋ text ＋ “]”)
    

.子程序 Share, 文本型, 公开, 返回生成好的CQ码
    .参数 url, 文本型, , URL
    .参数 title, 文本型, , 标题
    .参数 content, 文本型, 可空, 发送时可选, 内容描述
    .参数 image, 文本型, 可空, 发送时可选, 图片 URL
    .局部变量 cqc, 文本型

    cqc ＝ “[CQ:share,url=” ＋ url ＋ “,title=” ＋ title
    .如果真 (取反 (是否为空 (content)))
        cqc ＝ cqc ＋ “,content=” ＋ content
    .如果真结束
    .如果真 (取反 (是否为空 (image)))
        cqc ＝ cqc ＋ “,image=” ＋ image
    .如果真结束
    cqc ＝ cqc ＋ “]”
    返回 (cqc)
    

