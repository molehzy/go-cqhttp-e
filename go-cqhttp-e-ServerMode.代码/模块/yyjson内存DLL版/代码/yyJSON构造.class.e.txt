.版本 2

.程序集 yyJSON构造, , 公开, yyjson可变类
.子程序 取解析错误, 文本型, 公开, 取解析错误原因和错误位置 (需要开启: 捕捉解析错误())
    .参数 参_错误位置, 整数型, 参考 可空

    

.子程序 捕捉解析错误, 逻辑型, 公开, 开启捕捉解析时的错误原因和错误位置
    

.子程序 清空, , 公开, 释放内存,重新解析时候会自动调用
    

.子程序 取内存使用量, 整数型, 公开, 取整体内存使用长度
    

.子程序 到JSON, 文本型, 公开, 构造doc到json
    .参数 参_生成标志, 整数型, 可空, 参考 #YJ_生成标志_ (会继承 创建_解析 时 #YJ_解析标志_ANSI 标志)

    

.子程序 创建_解析, 逻辑型, 公开, 从文本解析JSON后创建. 成功返回真,失败返回假. (若要获取解析错误原因,使用 捕捉解析错误() 开启错误捕捉. 使用 取解析错误() 来获取错误信息)
    .参数 参_JSON, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 创建_解析_字节集, 逻辑型, 公开, 从字节集解析JSON后创建. 成功返回真,失败返回假. (若要获取解析错误原因,使用 捕捉解析错误() 开启错误捕捉. 使用 取解析错误() 来获取错误信息)
    .参数 参_JSON, 字节集
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 创建_解析_指针, 逻辑型, 公开, 从指针解析JSON后创建. 成功返回真,失败返回假. (若要获取解析错误原因,使用 捕捉解析错误() 开启错误捕捉. 使用 取解析错误() 来获取错误信息)
    .参数 参_JSON指针, 整数型
    .参数 参_长度, 整数型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 创建_解析_文件, 逻辑型, 公开, 从文件解析JSON后创建. 成功返回真,失败返回假. (若要获取解析错误原因,使用 捕捉解析错误() 开启错误捕捉. 使用 取解析错误() 来获取错误信息)
    .参数 参_文件路径, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 创建_从解析类容器, 逻辑型, 公开, 从 yyJSON解析类容器句柄 创建.
    .参数 参_解析类容器句柄, 整数型, , yyJSON解析类的句柄, 句柄类型必须是对象型 或 数组型.

    

.子程序 创建_从构造类容器, 逻辑型, 公开, 从 yyJSON构造类容器句柄 创建.
    .参数 参_构造类容器句柄, 整数型, , yyJSON构造类的句柄, 句柄类型必须是对象型 或 数组型.

    

.子程序 创建_空对象, 逻辑型, 公开, 创建空对象. 成功返回真,失败返回假.
    

.子程序 创建_空数组, 逻辑型, 公开, 创建空数组. 成功返回真,失败返回假.
    

.子程序 取根句柄, 整数型, 公开
    

.子程序 对象_创建枚举指针, 整数型, 公开, 用于枚举对象成员,使用完需要 对象_释放枚举指针() 来释放内存
    

.子程序 对象_释放枚举指针, , 公开, 释放由 对象_创建枚举指针() 申请的指针
    .参数 参_枚举指针, 整数型

    

.子程序 对象_枚举初始化, 逻辑型, 公开, 成功返回真,失败返回假. (注意: 使用内部指针则循环内不可再次调用. 可使用 对象_创建枚举指针() 和 对象_释放枚举指针() 来申请和释放)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_对象枚举指针, 整数型, 可空, 可空:默认使用内部指针(注意: 使用内部指针则循环内不可再次调用). 可使用 对象_创建枚举指针() 和 对象_释放枚举指针() 来申请和释放

    

.子程序 对象_枚举, 逻辑型, 公开, 取到成员返回真,失败返回假. (枚举前需先调用 对象_枚举初始化())
    .参数 返_键名, 文本型, 参考
    .参数 返_成员句柄, 整数型, 参考
    .参数 参_对象枚举指针, 整数型, 可空, 可空:默认使用内部指针(注意: 使用内部指针则循环内不可再次调用). 可使用 对象_创建枚举指针() 和 对象_释放枚举指针() 来申请和释放

    

.子程序 对象_枚举到键, 逻辑型, 公开, 枚举指定键后返回,存在返回真,不存在返回假. (枚举前需先调用 对象_枚举初始化())
    .参数 参_键名, 文本型
    .参数 返_成员句柄, 整数型, 参考
    .参数 参_对象枚举指针, 整数型, 可空, 可空:默认使用内部指针(注意: 使用内部指针则循环内不可再次调用). 可使用 对象_创建枚举指针() 和 对象_释放枚举指针() 来申请和释放

    

.子程序 对象_取成员, 整数型, 公开, 成功返回对象成员句柄,失败返回0  (线性搜索,遍历对象的话推荐使用枚举方法)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员序号 从0开始

    

.子程序 对象_取键名数组, 整数型, 公开, 取对象键名数组. 成功返回键名数量,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 返_结果数组, 文本型, 参考 数组

    

.子程序 对象_取成员键名, 文本型, 公开, 成功返回对象成员键名,失败返回""  (线性搜索,遍历对象的话推荐使用枚举方法)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员序号 从0开始

    

.子程序 对象_清除, 逻辑型, 公开, 删除对象全部节点. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 对象_旋转到首, 逻辑型, 公开, 将起始索引成员到尾部成员,位置旋转到首.
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_开始索引, 整数型, , 指定开始旋转的索引位置

    

.子程序 句柄_取JSON, 文本型, 公开, 取容器(对象型/数组型)JSON文本. 成功返回JSON文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_生成标志, 整数型, 可空, 参考 #YJ_生成标志_ (会继承 创建_解析 时 #YJ_解析标志_ANSI 标志)

    

.子程序 句柄_取成员数, 整数型, 公开, 取容器(对象型/数组型)成员数量. 成功返回成员数,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 句柄_取类型, 整数型, 公开, 取句柄类型 (可使用常量查看类型种类 #YJ_类型_). 成功返回类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 句柄_取数值类型, 整数型, 公开, 取数值型的详细类型(可使用常量查看数值类型种类 #YJ_数值类型_). 成功返回数值类型,失败返回0
    .参数 参_句柄, 整数型

    

.子程序 句柄_取文本, 文本型, 公开, 取文本值. 成功返回文本,失败返回""
    .参数 参_句柄, 整数型

    

.子程序 句柄_取文本指针, 整数型, 公开, 取文本值指针. 成功返回文本指针,失败返回空指针
    .参数 参_句柄, 整数型

    

.子程序 句柄_比较文本值, 逻辑型, 公开, 判断文本值是否为指定内容(直接对缓存进行比较,性能比获取值再比较好). 相等返回真,不相等返回假
    .参数 参_句柄, 整数型
    .参数 参_比较内容, 文本型

    

.子程序 句柄_比较节点, 逻辑型, 公开, 比较两个节点的类型和内容,完全一致返回真,否则返回假.
    .参数 参_欲比较句柄A, 整数型
    .参数 参_欲比较句柄B, 整数型

    

.子程序 句柄_取整数, 整数型, 公开, 取整数值(其它类型将会自动转换为整数型). 成功返回整数值,失败返回0
    .参数 参_句柄, 整数型

    

.子程序 句柄_取长整数, 长整数型, 公开, 取长整数值(其它类型将会自动转换为长整数型). 成功返回长整数值,失败返回0
    .参数 参_句柄, 整数型

    

.子程序 句柄_取双精度, 双精度小数型, 公开, 取双精度小数值(其它类型将会自动转换为双精度小数型). 成功返回双精度小数值,失败返回0
    .参数 参_句柄, 整数型

    

.子程序 句柄_取逻辑, 逻辑型, 公开, 取逻辑值. 成功返回逻辑值,失败返回假
    .参数 参_句柄, 整数型

    

.子程序 句柄_交换值, 逻辑型, 公开, 互换两个句柄值. 成功返回真,失败返回假.
    .参数 参_句柄1, 整数型
    .参数 参_句柄2, 整数型

    

.子程序 句柄_置空对象, 逻辑型, 公开, 置句柄为空对象. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 句柄_置空数组, 逻辑型, 公开, 置句柄为空数组. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 句柄_置解析类值, 逻辑型, 公开, 置句柄为yyJSON解析类值. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型
    .参数 参_解析类句柄, 整数型, , yyJSON解析类句柄

    

.子程序 句柄_置解析类对象合并值, 逻辑型, 公开, 置句柄为两个解析类对象合并后的值. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型
    .参数 参_解析类对象1, 整数型, , yyJSON解析类对象句柄
    .参数 参_解析类对象2, 整数型, , yyJSON解析类对象句柄

    

.子程序 句柄_置构造类值, 逻辑型, 公开, 置句柄为yyJSON构造类值. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型
    .参数 参_构造类句柄, 整数型, , yyJSON构造类句柄

    

.子程序 句柄_置JSON, 逻辑型, 公开, 置句柄为JSON文本. 成功返回真,失败返回假.
    .参数 参_句柄, 整数型
    .参数 参_JSON文本, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 句柄_置文本, 逻辑型, 公开, 置句柄为文本. 成功返回真,失败返回假
    .参数 参_句柄, 整数型
    .参数 参_文本, 文本型

    

.子程序 句柄_置整数, 逻辑型, 公开, 置句柄为为整数. 成功返回真,失败返回假
    .参数 参_句柄, 整数型
    .参数 参_整数值, 整数型

    

.子程序 句柄_置长整数, 逻辑型, 公开, 置句柄为长整数. 成功返回真,失败返回假
    .参数 参_句柄, 整数型
    .参数 参_长整数值, 长整数型

    

.子程序 句柄_置双精度, 逻辑型, 公开, 置句柄为双精度小数. 成功返回真,失败返回假
    .参数 参_句柄, 整数型
    .参数 参_双精度值, 双精度小数型

    

.子程序 句柄_置空, 逻辑型, 公开, 置句柄为空值. 成功返回真,失败返回假
    .参数 参_句柄, 整数型

    

.子程序 句柄_置逻辑, 逻辑型, 公开, 置句柄为逻辑值. 成功返回真,失败返回假
    .参数 参_句柄, 整数型
    .参数 参_逻辑值, 逻辑型

    

.子程序 取句柄, 整数型, 公开, 根据键取值句柄. 成功返回值句柄,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取JSON, 文本型, 公开, 根据键取容器(对象型/数组型)JSON. 成功返回JSON文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型
    .参数 参_生成标志, 整数型, 可空, 参考 #YJ_生成标志_ (会继承 创建_解析 时 #YJ_解析标志_ANSI 标志)

    

.子程序 取成员数, 整数型, 公开, 根据键取容器(对象型/数组型)成员数量. 成功返回成员数,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取类型, 整数型, 公开, 根据键取值的类型 (可使用常量查看类型种类 #YJ_类型_). 成功返回值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取数值类型, 整数型, 公开, 根据键取数值型的详细类型(可使用常量查看数值类型种类 #YJ_数值类型_). 成功返回数值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 是否存在, 逻辑型, 公开, 根据键查询键值是否存在. 存在返回真,不存在返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取文本, 文本型, 公开, 根据键取文本值. 成功返回文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取文本指针, 整数型, 公开, 根据键取文本值指针. 成功返回文本指针,失败返回空文本指针
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 比较文本值, 逻辑型, 公开, 根据键判断其文本值是否为指定内容(直接对缓存进行比较,性能比获取值再比较好). 相等返回真,不相等返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型
    .参数 参_比较内容, 文本型

    

.子程序 比较节点, 逻辑型, 公开, 根据路径比较两个节点的类型和内容,完全一致返回真,否则返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_欲比较键A, 文本型
    .参数 参_欲比较键B, 文本型

    

.子程序 取整数, 整数型, 公开, 根据键取整数值(其它类型将会自动转换为整数型). 成功返回整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取长整数, 长整数型, 公开, 根据键取长整数值(其它类型将会自动转换为长整数型). 成功返回长整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取双精度, 双精度小数型, 公开, 根据键取双精度小数值(其它类型将会自动转换为双精度小数型). 成功返回双精度小数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 取逻辑, 逻辑型, 公开, 根据键取逻辑值. 成功返回逻辑值,失败返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 删除节点, 逻辑型, 公开, 根据键删除指定节点. 删除成功返回真,失败返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_键, 文本型

    

.子程序 置空对象, 整数型, 公开, 根据键置空对象值. 成功返回新对象句柄,失败返回0.
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置空数组, 整数型, 公开, 根据键置空数组键值. 成功返回新数组句柄,失败返回0.
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置解析类值, 整数型, 公开, 根据键置yyJSON解析类值句柄. 成功返回可变句柄,失败返回0
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_解析类句柄, 整数型, , yyJSON解析类值句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置解析类对象合并值, 整数型, 公开, 根据键置两个解析类对象合并后的值. 成功返回可变句柄,失败返回0
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_解析类对象1, 整数型, , yyJSON解析类对象句柄
    .参数 参_解析类对象2, 整数型, , yyJSON解析类对象句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置构造类值, 整数型, 公开, 根据键置yyJSON构造类值句柄. 成功返回可变句柄,失败返回0
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_构造类句柄, 整数型, , yyJSON构造类值句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置JSON, 整数型, 公开, 根据键置JSON文本值. 成功返回可变句柄,失败返回0
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_JSON, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置文本, 逻辑型, 公开, 根据键置文本值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_文本值, 文本型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置整数, 逻辑型, 公开, 根据键置整数值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_整数值, 整数型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置长整数, 逻辑型, 公开, 根据键置长整数值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_长整数值, 长整数型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置双精度, 逻辑型, 公开, 根据键置双精度小数值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_双精度值, 双精度小数型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置空, 逻辑型, 公开, 根据键置空值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 置逻辑, 逻辑型, 公开, 根据键置逻辑值. 成功返回真,失败返回假
    .参数 参_对象句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_键, 文本型
    .参数 参_逻辑值, 逻辑型
    .参数 参_替换, 逻辑型, 可空, 默认为真:如果键存在,则替换值(需要线性搜索时间),不存在则直接添加. 为假:直接添加(性能好,但需要自己判断键是否已经存在).

    

.子程序 数组_创建枚举指针, 整数型, 公开, 用于枚举数组成员,使用完需要 数组_释放枚举指针() 来释放内存
    

.子程序 数组_释放枚举指针, , 公开, 释放由 数组_创建枚举指针() 申请的指针
    .参数 参_枚举指针, 整数型

    

.子程序 数组_枚举初始化, 逻辑型, 公开, 成功返回真,失败返回假. (注意: 使用内部指针则循环内不可再次调用. 可使用 数组_创建枚举指针() 和 数组_释放枚举指针() 来申请和释放)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_数组枚举指针, 整数型, 可空, 可空:默认使用内部指针(注意: 使用内部指针则循环内不可再次调用).可使用 数组_创建枚举指针() 和 数组_释放枚举指针() 来申请和释放

    

.子程序 数组_枚举, 逻辑型, 公开, 取到成员返回真,失败返回假. (枚举前需先调用 数组_枚举初始化())
    .参数 返_成员句柄, 整数型, 参考
    .参数 参_数组枚举指针, 整数型, 可空, 可空:默认使用内部指针(注意: 使用内部指针则循环内不可再次调用).可使用 数组_创建枚举指针() 和 数组_释放枚举指针() 来申请和释放

    

.子程序 数组_取成员数, 整数型, 公开, 取数组成员数量(与 句柄_取成员数() 相同). 成功返回成员数量,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄

    

.子程序 数组_取成员, 整数型, 公开, 根据成员索引取成员句柄. 成功返回成员句柄,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取JSON, 文本型, 公开, 根据成员索引取容器成员(对象型/数组型)JSON文本. 成功返回JSON文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)
    .参数 参_生成标志, 整数型, 可空, 参考 #YJ_生成标志_ (会继承 创建_解析 时 #YJ_解析标志_ANSI 标志)

    

.子程序 数组_取类型, 整数型, 公开, 根据成员索引取成员的类型 (可使用常量查看类型种类 #YJ_类型_). 成功返回值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取数值类型, 整数型, 公开, 根据成员索引取数值型的详细类型(可使用常量查看数值类型种类 #YJ_数值类型_). 成功返回数值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取文本, 文本型, 公开, 根据成员索引取文本值. 成功返回文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取文本指针, 整数型, 公开, 根据成员索引取文本值指针. 成功返回文本指针,失败返回空文本指针
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_比较文本值, 逻辑型, 公开, 根据索引判断其文本值是否为指定内容(直接对缓存进行比较,性能比获取值再比较好). 相等返回真,不相等返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)
    .参数 参_比较内容, 文本型

    

.子程序 数组_比较节点, 逻辑型, 公开, 根据索引比较两个成员的类型和内容,完全一致返回真,否则返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_欲比较成员索引A, 整数型
    .参数 参_欲比较成员索引B, 整数型

    

.子程序 数组_取整数, 整数型, 公开, 根据成员索引取整数值(其它类型将会自动转换为整数型). 成功返回整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取长整数, 长整数型, 公开, 根据成员索引取长整数值(其它类型将会自动转换为长整数型). 成功返回长整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取双精度, 双精度小数型, 公开, 根据成员索引取双精度小数值(其它类型将会自动转换为双精度小数型). 成功返回双精度小数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_取逻辑, 逻辑型, 公开, 根据成员索引取逻辑值. 成功返回逻辑值,失败返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_索引, 整数型, , 成员索引(从0开始)

    

.子程序 数组_清除, 逻辑型, 公开, 清除数组全部成员. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)

    

.子程序 数组_删除成员, 逻辑型, 公开, 成功返回真,失败返回假.
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_开始索引, 整数型, , 索引从0开始
    .参数 参_删除数量, 整数型, 可空, 可空: 至少删除1个成员

    

.子程序 数组_置空对象, 整数型, 公开, 置数组成员为空对象. 成功返回新数组句柄,失败返回0.
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置空数组, 整数型, 公开, 置数组成员为空数组. 成功返回新数组句柄,失败返回0.
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置解析类值, 整数型, 公开, 置数组成员为yyJSON解析类值. 成功返回可变句柄,失败返回0
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_解析类值句柄, 整数型, , yyJSON解析类值句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置解析类对象合并值, 整数型, 公开, 置数组成员为两个解析类对象合并后的值. 成功返回可变句柄,失败返回0
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_解析类对象1, 整数型, , yyJSON解析类对象句柄
    .参数 参_解析类对象2, 整数型, , yyJSON解析类对象句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置构造类值, 整数型, 公开, 置数组成员为yyJSON构造类值. 成功返回可变句柄,失败返回0
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_构造类值句柄, 整数型, , yyJSON构造类值句柄
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置JSON, 整数型, 公开, 置数组成员值为JSON文本. 成功返回可变句柄,失败返回0
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_JSON文本, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置文本, 逻辑型, 公开, 置数组成员为文本. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是arr句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_文本, 文本型
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置整数, 逻辑型, 公开, 置数组成员为整数. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_整数值, 整数型
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置长整数, 逻辑型, 公开, 置数组成员为长整数. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_长整数值, 长整数型
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置双精度, 逻辑型, 公开, 置数组成员为双精度小数. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_双精度值, 双精度小数型
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置空, 逻辑型, 公开, 置数组成员为空值. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_置逻辑, 逻辑型, 公开, 置数组成员为逻辑值. 成功返回真,失败返回假
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 (必须是obj句柄)
    .参数 参_成员索引, 整数型, , 索引从0开始. 如果索引为 #YJ_数组_加入 则添加值到数组尾部, 否则将 插入到 或 替换为 索引值. 如果索引超出数组长度则操作失败
    .参数 参_逻辑值, 逻辑型
    .参数 参_替换, 逻辑型, 可空, 默认为真: 替换索引值,若索引不存在则操作失败(如果索引为 #YJ_数组_加入 则该参数无效)

    

.子程序 数组_旋转到首, 逻辑型, 公开, 将起始索引成员到尾部成员,位置旋转到首.
    .参数 参_数组句柄, 整数型, 可空, 可空:默认为根节点句柄 
    .参数 参_开始索引, 整数型, , 指定开始旋转的索引位置

    

.子程序 通配_取句柄, 整数型, 公开, 根据路径取值句柄. 成功返回值句柄,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取JSON, 文本型, 公开, 根据路径取容器(对象型/数组型)JSON文本. 成功返回JSON文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_生成标志, 整数型, 可空, 参考 #YJ_生成标志_ (会继承 创建_解析 时 #YJ_解析标志_ANSI 标志)

    

.子程序 通配_取成员数, 整数型, 公开, 根据路径取容器(对象型/数组型)成员数量. 成功返回成员数,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取类型, 整数型, 公开, 根据路径取值的类型 (可使用常量查看类型种类 #YJ_类型_). 成功返回值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取数值类型, 整数型, 公开, 根据路径取数值型的详细类型(可使用常量查看数值类型种类 #YJ_数值类型_). 成功返回数值类型,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_是否存在, 逻辑型, 公开, 根据路径查询键值是否存在. 存在返回真,不存在返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取文本, 文本型, 公开, 根据路径取文本值. 成功返回文本,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取文本指针, 整数型, 公开, 根据路径取文本值指针. 成功返回文本指针,失败返回空文本指针
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_比较文本值, 逻辑型, 公开, 根据路径判断其文本值是否为指定内容(直接对缓存进行比较,性能比获取值再比较好). 相等返回真,不相等返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_比较内容, 文本型

    

.子程序 通配_比较节点, 逻辑型, 公开, 根据路径比较两个节点的类型和内容,完全一致返回真,否则返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_欲比较路径A, 文本型
    .参数 参_欲比较路径B, 文本型

    

.子程序 通配_取整数, 整数型, 公开, 根据路径取整数值(其它类型将会自动转换为整数型). 成功返回整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取长整数, 长整数型, 公开, 根据路径取长整数值(其它类型将会自动转换为长整数型). 成功返回长整数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取双精度, 双精度小数型, 公开, 根据路径取双精度小数值(其它类型将会自动转换为双精度小数型). 成功返回双精度小数值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取逻辑, 逻辑型, 公开, 根据路径取逻辑值. 成功返回逻辑值,失败返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_取文本配置, 文本型, 公开, 根据路径取文本值,路径不存在则自动构造并设置为默认值. 成功返回配置值,失败返回""
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_默认值, 文本型

    

.子程序 通配_取整数配置, 整数型, 公开, 根据路径取整数值,路径不存在则自动构造并设置为默认值. 成功返回配置值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_默认值, 整数型

    

.子程序 通配_取长整数配置, 长整数型, 公开, 根据路径取长整数值,路径不存在则自动构造并设置为默认值. 成功返回配置值,失败返回0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_默认值, 长整数型

    

.子程序 通配_取双精度配置, 双精度小数型, 公开, 根据路径取双精度小数值,路径不存在则自动构造并设置为默认值. 成功返回配置值,失败返回0.0
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_默认值, 双精度小数型

    

.子程序 通配_取逻辑配置, 逻辑型, 公开, 根据路径取逻辑值,路径不存在则自动构造并设置为默认值. 成功返回配置值,失败返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_默认值, 逻辑型

    

.子程序 通配_交换路径值, 逻辑型, 公开, 交换两个路径的值. 成功返回真,失败返回假
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径1, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_路径2, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_删除, 逻辑型, 公开, 根据路径删除指定节点. 删除成功返回真,失败返回假.
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_数组删除数量, 整数型, 可空, 默认为1. (目标句柄仅为数组型时有效)

    

.子程序 通配_置空对象, 整数型, 公开, 根据路径置空对象值. 成功返回新对象句柄,失败返回0. (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型

    

.子程序 通配_置空数组, 整数型, 公开, 根据路径置空数组键值. 成功返回新数组句柄,失败返回0. (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_置解析类值, 整数型, 公开, 根据路径置yyJSON解析类值句柄. 成功返回可变句柄,失败返回0 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_解析类句柄, 整数型, , yyJSON解析类值句柄

    

.子程序 通配_置解析类对象合并值, 整数型, 公开, 根据路径置两个解析类对象合并后的值. 成功返回可变句柄,失败返回0 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_解析类对象1, 整数型, , yyJSON解析类对象句柄
    .参数 参_解析类对象2, 整数型, , yyJSON解析类对象句柄

    

.子程序 通配_置构造类值, 整数型, 公开, 根据路径置yyJSON构造类值句柄. 成功返回可变句柄,失败返回0 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_构造类句柄, 整数型, , yyJSON构造类值句柄

    

.子程序 通配_置JSON, 整数型, 公开, 根据路径置JSON文本值. 成功返回可变句柄,失败返回0 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_JSON, 文本型
    .参数 参_解析标志, 整数型, 可空, 为空则为默认模式 (仅支持UTF8编码). 其他标志请使用 #YYJSON_READ_ 相关常量. 多种模式可以将其 位或() 或者 相加 合并

    

.子程序 通配_置文本, 逻辑型, 公开, 根据路径置文本值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_文本值, 文本型

    

.子程序 通配_置整数, 逻辑型, 公开, 根据路径置整数值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_整数值, 整数型

    

.子程序 通配_置长整数, 逻辑型, 公开, 根据路径置长整数值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_长整数值, 长整数型

    

.子程序 通配_置双精度, 逻辑型, 公开, 根据路径置双精度小数值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_双精度值, 双精度小数型

    

.子程序 通配_置空, 逻辑型, 公开, 根据路径置空值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)

    

.子程序 通配_置逻辑, 逻辑型, 公开, 根据路径置逻辑值. 成功返回真,失败返回假 (若路径不存在,则会自动构造父值)
    .参数 参_句柄, 整数型, 可空, 可空:默认为根节点句柄
    .参数 参_路径, 文本型, , 必须以"/"开头(如"/name"),支持多路径 "/array/0" 等于 arrat[0] (RFC 6901标准)
    .参数 参_逻辑值, 逻辑型

    

